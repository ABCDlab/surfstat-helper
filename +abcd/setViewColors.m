function setViewColors( varargin)
%setViewColors([handle], [options])
%
%   Changes the color of the underlying surface and/or any masked-out regions
%   in a figure generated by SurfStatView
%
%   Arguments:
%
%   handle      If omitted, uses gcf
%   'mask'      [r,g,b]  (optional)
%   'surface'   [r,g,b]  (optional)
%
% e.g.
%   abcd.setViewColors(h, 'mask',[.5,.5,.5])
%   abcd.setViewColors('mask',[.5,.5,.5], 'surface',[0 0 0])

    h = gcf;
    firstArg = 1;
    if isnumeric(varargin{1})
        h = varargin{1};
        firstArg = 2;
    end

    if strcmp(get(h,'Tag'),'Colorbar')
        cb = h;
    else
        cb = findobj(h,'tag','Colorbar');
    end
    cbAttr = [];
    preserveAttr = {'XTick', 'XTickLabel'};
    for i=1:numel(preserveAttr)
        cbAttr.(preserveAttr{i}) = get(cb, preserveAttr{i});
    end

    isColor = @(x) isnumeric(x) && all(size(x)==[1 3]);

    p = inputParser;
    p.addParamValue('mask', [], isColor);
    p.addParamValue('surface', [], isColor);
    p.parse(varargin{firstArg:nargin});

    cm = colormap(h);
    assert(all(size(cm)==[256,3]), 'Expected colormap to have dimensions 256x3!');
    if ~isempty(p.Results.mask)
        cm(1,:) = p.Results.mask(:)';
    end
    if ~isempty(p.Results.surface)
        cm(129,:) = p.Results.surface(:)';
    end
    colormap(h,cm);

    for i=1:numel(preserveAttr)
        set(cb, preserveAttr{i}, cbAttr.(preserveAttr{i}));
    end
end

